<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema 

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        zNdI/wMlrzQ7dde9KwAAAABJRU5ErkJggg==
</value>
  </data>
</root>